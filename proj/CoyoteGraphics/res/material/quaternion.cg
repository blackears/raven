//http://www.genesis3d.com/~kdtop/Quaternions-UsingToRepresentRotation.htm

//For unit quaternions, conjugate is same as inverse
vec4 quatConj(vec4 q)
{
    return vec4(-q.xyz, q.w);
}

//Multiply to quaternions
vec4 quatMul(vec4 q0, vec4 q1)
{
    return vec4(
        q0.w * q1.xyz + q1.w * q0.xyz + cross(q0.xyz, q1.xyz),
        q0.w * q1.w - dot(q0.xyz, q1.xyz));
}

//Finds inverse of quaternion.  Works for non-unit length quaternions too.
// If quat is known to be unit length, use quatConj instead.
vec4 quatInv(vec4 q)
{
    vec4 qq = quatConj(q);
    return qq / dot(q, qq);
}

//Create a unit length rotation quaternion from an 
// angle and an axis of rotation
vec4 quatCreateRot(float angle, vec3 unitAxis)
{
    return vec4(unitAxis * sin(angle / 2), cos(angle / 2));
}

//Rotate the point p about the unit quaternion q
vec3 quatRot(vec4 q, vec3 p)
{
    return quatMul(q, quatMul(vec4(p, 0), quatConj(q)));
}

//http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/index.htm
mat3x3 quatToMat(vec4 q)
{
    return mat3x3(
        1 - 2 * q.y * q.y - 2 * q.z * q.z, 
        2 * q.x * q.y + 2 * q.z * q.w,
        2 * q.x * q.z - 2 * q.y * q.w,

        2 * q.x * q.y - 2 * q.z * q.w,
        1 - 2 * q.x * q.x - 2 * q.z * q.z, 
        2 * q.y * q.z + 2 * q.x * q.w,

        2 * q.x * q.z + 2 * q.y * q.w,
        2 * q.y * q.z - 2 * q.x * q.w,
        1 - 2 * q.x * q.x - 2 * q.y * q.y
    );
}

//http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
vec4 matToQuat(mat3x3 m)
{
    float tr = m[0][0] + m[1][1] + m[2][2];

    if (tr > 0)
    {
        float s = sqrt(tr + 1) * 2;
        return vec4(
            (m[2][1] - m[1][2]) / s,
            (m[0][2] - m[2][0]) / s,
            (m[1][0] - m[0][1]) / s,
            .25 * s);
    }
    else if (m[0][0] > m[1][1] && m[0][0] > m[2][2])
    {
        float s = sqrt(1 + m[0][0] - m[1][1] - m[2][2]) * 2;
        return vec4(
            .25 * s,
            (m[0][1] + m[1][0]) / s,
            (m[0][2] + m[2][0]) / s,
            (m[2][1] - m[1][2]) / s
            );
    }
    else if (m[1][1] > m[2][2])
    {
        float s = sqrt(1 - m[0][0] + m[1][1] - m[2][2]) * 2;
        return vec4(
            (m[0][1] + m[1][0]) / s,
            .25 * s,
            (m[1][2] + m[2][1]) / s,
            (m[0][2] - m[2][0]) / s
            );
    }
    else
    {
        float s = sqrt(1 - m[0][0] - m[1][1] + m[2][2]) * 2;
        return vec4(
            (m[0][2] + m[2][0]) / s,
            (m[1][2] + m[2][1]) / s,
            .25 * s,
            (m[1][0] - m[0][1]) / s
            );
    }
}