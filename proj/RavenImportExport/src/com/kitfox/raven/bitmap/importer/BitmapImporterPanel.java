/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ImportSWFPanel.java
 *
 * Created on Dec 5, 2010, 9:39:23 AM
 */

package com.kitfox.raven.bitmap.importer;

import com.kitfox.raven.util.FileFilterSuffix;
import com.kitfox.raven.wizard.RavenWizardPage;
import java.awt.Component;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

/**
 *
 * @author kitfox
 */
public class BitmapImporterPanel extends JPanel
        implements RavenWizardPage
{
    public static final String WIZ_DESC = "Choose bitmap image import settings";

    final FileChooser fileChooser = new FileChooser();
    final BitmapImporterContext ctx;

    boolean updating;

    /** Creates new form ImportSWFPanel */
    public BitmapImporterPanel(BitmapImporterContext ctx)
    {
        this.ctx = ctx;
        
        initComponents();

        updateFromProperties();
    }

    private void updateFromProperties()
    {
        updating = true;

        text_file.setText(ctx.getSeqFile());
        spinner_threshold.setValue(ctx.getThreshold());
        spinner_smoothing.setValue(ctx.getSmoothing());
        switch (ctx.getMatrix())
        {
            case ALPHA:
            {
                radio_matrixAlpha.setSelected(true);
                radio_matrixLuminance.setSelected(false);
                break;
            }
            case LUMINANCE:
            {
                radio_matrixAlpha.setSelected(false);
                radio_matrixLuminance.setSelected(true);
                break;
            }
        }

        if (ctx.isLightEmpty())
        {
            radio_emptyLight.setSelected(true);
            radio_emptyDark.setSelected(false);
        }
        else
        {
            radio_emptyLight.setSelected(false);
            radio_emptyDark.setSelected(true);
        }

        File file = new File(ctx.getSeqFile());
        if (file.exists())
        {
            if (!file.isDirectory())
            {
                file = file.getParentFile();
            }
            fileChooser.setCurrentDirectory(file);
        }
        
        
        updating = false;
    }

    @Override
    public String getTitle()
    {
        return WIZ_DESC;
    }

    @Override
    public Component getComponent()
    {
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup_colorMatrix = new javax.swing.ButtonGroup();
        buttonGroup_empty = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        text_file = new javax.swing.JTextField();
        bn_chooseFile = new javax.swing.JButton();
        radio_matrixAlpha = new javax.swing.JRadioButton();
        radio_matrixLuminance = new javax.swing.JRadioButton();
        spinner_threshold = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        radio_emptyDark = new javax.swing.JRadioButton();
        radio_emptyLight = new javax.swing.JRadioButton();
        jLabel3 = new javax.swing.JLabel();
        spinner_smoothing = new javax.swing.JSpinner();

        jLabel1.setText("Location");

        text_file.setName("location"); // NOI18N
        text_file.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                text_fileActionPerformed(evt);
            }
        });

        bn_chooseFile.setText("...");
        bn_chooseFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bn_chooseFileActionPerformed(evt);
            }
        });

        buttonGroup_colorMatrix.add(radio_matrixAlpha);
        radio_matrixAlpha.setText("alpha channel");
        radio_matrixAlpha.setToolTipText("Use alpha channel of input image");
        radio_matrixAlpha.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                radio_matrixAlphaActionPerformed(evt);
            }
        });

        buttonGroup_colorMatrix.add(radio_matrixLuminance);
        radio_matrixLuminance.setText("luminance");
        radio_matrixLuminance.setToolTipText("Use luminance of input image");
        radio_matrixLuminance.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                radio_matrixLuminanceActionPerformed(evt);
            }
        });

        spinner_threshold.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(0.0f), Float.valueOf(0.0f), Float.valueOf(1.0f), Float.valueOf(0.1f)));
        spinner_threshold.setToolTipText("Value dividing dark pixels from light pixels");
        spinner_threshold.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinner_thresholdStateChanged(evt);
            }
        });

        jLabel2.setText("Threshold");

        buttonGroup_empty.add(radio_emptyDark);
        radio_emptyDark.setText("dark regions are empty");
        radio_emptyDark.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                radio_emptyDarkActionPerformed(evt);
            }
        });

        buttonGroup_empty.add(radio_emptyLight);
        radio_emptyLight.setText("light regions are empty");
        radio_emptyLight.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                radio_emptyLightActionPerformed(evt);
            }
        });

        jLabel3.setText("Smoothing");

        spinner_smoothing.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(1.0f), null, Float.valueOf(1.0f)));
        spinner_smoothing.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinner_smoothingStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(text_file, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bn_chooseFile))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radio_matrixAlpha)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spinner_threshold, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(radio_matrixLuminance)
                            .addComponent(radio_emptyDark)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(spinner_smoothing))
                                .addComponent(radio_emptyLight)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(text_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bn_chooseFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radio_matrixLuminance)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radio_matrixAlpha)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spinner_threshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(radio_emptyDark)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(radio_emptyLight)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinner_smoothing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(116, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bn_chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bn_chooseFileActionPerformed
        int val = fileChooser.showOpenDialog(this);
        if (val != JFileChooser.APPROVE_OPTION)
        {
            return;
        }

        File file = fileChooser.getSelectedFile();
        text_file.setText(file.getAbsolutePath());
        ctx.setSeqFile(file.getAbsolutePath());
    }//GEN-LAST:event_bn_chooseFileActionPerformed

    private void text_fileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_text_fileActionPerformed
    {//GEN-HEADEREND:event_text_fileActionPerformed
        if (updating)
        {
            return;
        }

        ctx.setSeqFile(text_file.getText());
    }//GEN-LAST:event_text_fileActionPerformed

    private void radio_matrixAlphaActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radio_matrixAlphaActionPerformed
    {//GEN-HEADEREND:event_radio_matrixAlphaActionPerformed
        ctx.setMatrix(BitmapColorMatrix.ALPHA);
    }//GEN-LAST:event_radio_matrixAlphaActionPerformed

    private void radio_matrixLuminanceActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radio_matrixLuminanceActionPerformed
    {//GEN-HEADEREND:event_radio_matrixLuminanceActionPerformed
        ctx.setMatrix(BitmapColorMatrix.LUMINANCE);
    }//GEN-LAST:event_radio_matrixLuminanceActionPerformed

    private void spinner_thresholdStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinner_thresholdStateChanged
    {//GEN-HEADEREND:event_spinner_thresholdStateChanged
        ctx.setThreshold((Float)spinner_threshold.getValue());
    }//GEN-LAST:event_spinner_thresholdStateChanged

    private void radio_emptyDarkActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radio_emptyDarkActionPerformed
    {//GEN-HEADEREND:event_radio_emptyDarkActionPerformed
        ctx.setLightEmpty(false);
    }//GEN-LAST:event_radio_emptyDarkActionPerformed

    private void radio_emptyLightActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_radio_emptyLightActionPerformed
    {//GEN-HEADEREND:event_radio_emptyLightActionPerformed
        ctx.setLightEmpty(true);
    }//GEN-LAST:event_radio_emptyLightActionPerformed

    private void spinner_smoothingStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinner_smoothingStateChanged
    {//GEN-HEADEREND:event_spinner_smoothingStateChanged
        ctx.setSmoothing((Float)spinner_smoothing.getValue());
    }//GEN-LAST:event_spinner_smoothingStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_chooseFile;
    private javax.swing.ButtonGroup buttonGroup_colorMatrix;
    private javax.swing.ButtonGroup buttonGroup_empty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JRadioButton radio_emptyDark;
    private javax.swing.JRadioButton radio_emptyLight;
    private javax.swing.JRadioButton radio_matrixAlpha;
    private javax.swing.JRadioButton radio_matrixLuminance;
    private javax.swing.JSpinner spinner_smoothing;
    private javax.swing.JSpinner spinner_threshold;
    private javax.swing.JTextField text_file;
    // End of variables declaration//GEN-END:variables


    class FileChooser extends JFileChooser
    {
        public FileChooser()
        {
            FileFilterSuffix filter = new FileFilterSuffix(
                    "Image", ImageIO.getReaderFormatNames());
            
            setFileFilter(filter);
//            setCurrentDirectory(new File("work"));
        }
    }
}
