/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ImportSWFPanel.java
 *
 * Created on Dec 5, 2010, 9:39:23 AM
 */

package com.kitfox.raven.image.importer;

import com.kitfox.raven.util.FileFilterSuffix;
import com.kitfox.raven.wizard.RavenWizardPage;
import java.awt.Component;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JPanel;

/**
 *
 * @author kitfox
 */
public class ImageImporterPanel extends JPanel
        implements RavenWizardPage
{
    public static final String WIZ_DESC = "Choose bitmap image import settings";

    final FileChooser fileChooser = new FileChooser();
    final ImageImporterContext ctx;

    boolean updating;

    /** Creates new form ImportSWFPanel */
    public ImageImporterPanel(ImageImporterContext ctx)
    {
        this.ctx = ctx;
        
        initComponents();

        updateFromProperties();
    }

    private void updateFromProperties()
    {
        updating = true;

        text_file.setText(ctx.getSeqFile());
        spinner_smoothing.setValue(ctx.getSmoothing());

        File file = new File(ctx.getSeqFile());
        if (file.exists())
        {
            if (!file.isDirectory())
            {
                file = file.getParentFile();
            }
            fileChooser.setCurrentDirectory(file);
        }
        
        
        updating = false;
    }

    @Override
    public String getTitle()
    {
        return WIZ_DESC;
    }

    @Override
    public Component getComponent()
    {
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup_colorMatrix = new javax.swing.ButtonGroup();
        buttonGroup_empty = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        text_file = new javax.swing.JTextField();
        bn_chooseFile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        spinner_smoothing = new javax.swing.JSpinner();

        jLabel1.setText("Location");

        text_file.setName("location"); // NOI18N
        text_file.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                text_fileActionPerformed(evt);
            }
        });

        bn_chooseFile.setText("...");
        bn_chooseFile.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                bn_chooseFileActionPerformed(evt);
            }
        });

        jLabel3.setText("Smoothing");

        spinner_smoothing.setModel(new javax.swing.SpinnerNumberModel(Float.valueOf(1.0f), Float.valueOf(1.0f), null, Float.valueOf(1.0f)));
        spinner_smoothing.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinner_smoothingStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(text_file, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bn_chooseFile))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinner_smoothing, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 245, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(text_file, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bn_chooseFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(spinner_smoothing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(65, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bn_chooseFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bn_chooseFileActionPerformed
        int val = fileChooser.showOpenDialog(this);
        if (val != JFileChooser.APPROVE_OPTION)
        {
            return;
        }

        File file = fileChooser.getSelectedFile();
        text_file.setText(file.getAbsolutePath());
        ctx.setSeqFile(file.getAbsolutePath());
    }//GEN-LAST:event_bn_chooseFileActionPerformed

    private void text_fileActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_text_fileActionPerformed
    {//GEN-HEADEREND:event_text_fileActionPerformed
        if (updating)
        {
            return;
        }

        ctx.setSeqFile(text_file.getText());
    }//GEN-LAST:event_text_fileActionPerformed

    private void spinner_smoothingStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinner_smoothingStateChanged
    {//GEN-HEADEREND:event_spinner_smoothingStateChanged
        ctx.setSmoothing((Float)spinner_smoothing.getValue());
    }//GEN-LAST:event_spinner_smoothingStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_chooseFile;
    private javax.swing.ButtonGroup buttonGroup_colorMatrix;
    private javax.swing.ButtonGroup buttonGroup_empty;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner spinner_smoothing;
    private javax.swing.JTextField text_file;
    // End of variables declaration//GEN-END:variables


    class FileChooser extends JFileChooser
    {
        public FileChooser()
        {
            FileFilterSuffix filter = new FileFilterSuffix(
                    "Image", ImageIO.getReaderFormatNames());
            
            setFileFilter(filter);
//            setCurrentDirectory(new File("work"));
        }
    }
}
