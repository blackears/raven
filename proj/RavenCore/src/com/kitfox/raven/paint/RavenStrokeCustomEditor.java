/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * StrokeStyleCustomEditor.java
 *
 * Created on Sep 17, 2009, 8:14:59 PM
 */

package com.kitfox.raven.paint;

import com.kitfox.coyote.shape.CyStroke;
import com.kitfox.coyote.shape.CyStrokeCap;
import com.kitfox.coyote.shape.CyStrokeJoin;
import com.kitfox.rabbit.util.NumberText;
import com.kitfox.raven.util.tree.PropertyCustomEditor;
import com.kitfox.raven.util.tree.PropertyData;
import com.kitfox.raven.util.tree.PropertyDataInline;
import java.awt.Component;

/**
 *
 * @author kitfox
 */
public class RavenStrokeCustomEditor extends javax.swing.JPanel 
    implements PropertyCustomEditor
{
    private static final long serialVersionUID = 1;

//    PropertyChangeWeakListener listener;
    RavenStrokeEditor ed;

    boolean updating = true;
    
    PropertyData<RavenStroke> initValue;
    RavenStroke curValue;

    /** Creates new form StrokeStyleCustomEditor */
    public RavenStrokeCustomEditor(RavenStrokeEditor ed)
    {
        this.ed = ed;
        initComponents();

        initValue = ed.getValue();
        curValue = initValue.getValue(ed.getDocument());
        
        combo_cap.addItem(CyStrokeCap.BUTT);
        combo_cap.addItem(CyStrokeCap.ROUND);
        combo_cap.addItem(CyStrokeCap.SQUARE);

        combo_join.addItem(CyStrokeJoin.BEVEL);
        combo_join.addItem(CyStrokeJoin.MITER);
        combo_join.addItem(CyStrokeJoin.ROUND);

//        listener = new PropertyChangeWeakListener(this, ed);
//        ed.addPropertyChangeListener(listener);

        update();
        updating = false;
    }

    public void update()
    {        
        updating = true;

        RavenStroke ravenStroke = ed.getValueFlat();
        if (ravenStroke == null)
        {
            ravenStroke = new RavenStroke();
        }

        CyStroke stroke = ravenStroke.getStroke();
        spinner_width.setValue(stroke.getWidth());
        combo_cap.setSelectedItem(stroke.getCap());
        combo_join.setSelectedItem(stroke.getJoin());
        spinner_miterLimit.setValue(stroke.getMiterLimit());
        float[] dashArray = stroke.getDashFloat();
        text_dash.setText(dashArray == null ? "" : NumberText.asString(dashArray, ","));
        spinner_dashOffset.setValue(stroke.getDashOffset());

        updating = false;
    }

    public void export()
    {
        double width = (Double)spinner_width.getValue();
        CyStrokeCap cap = (CyStrokeCap)combo_cap.getSelectedItem();
        CyStrokeJoin join = (CyStrokeJoin)combo_join.getSelectedItem();
        double miterLimit = (Double)spinner_miterLimit.getValue();
        double[] dash = NumberText.findDoubleArray(text_dash.getText());
        double dashOffset = (Double)spinner_dashOffset.getValue();
        CyStroke stroke = new CyStroke(
                width, cap, join, miterLimit, dash, dashOffset);
        curValue = new RavenStroke(stroke);

        ed.setValue(new PropertyDataInline(curValue), false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jLabel1 = new javax.swing.JLabel();
        combo_cap = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        combo_join = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        text_dash = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        spinner_width = new javax.swing.JSpinner();
        spinner_miterLimit = new javax.swing.JSpinner();
        spinner_dashOffset = new javax.swing.JSpinner();

        jLabel1.setText("Width");

        combo_cap.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                combo_capActionPerformed(evt);
            }
        });

        jLabel2.setText("Cap");

        jLabel3.setText("Join");

        combo_join.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                combo_joinActionPerformed(evt);
            }
        });

        jLabel4.setText("Miter Limit");

        jLabel5.setText("Dash");

        text_dash.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                text_dashActionPerformed(evt);
            }
        });
        text_dash.addFocusListener(new java.awt.event.FocusAdapter()
        {
            public void focusLost(java.awt.event.FocusEvent evt)
            {
                text_dashFocusLost(evt);
            }
        });

        jLabel6.setText("Dash Offset");

        spinner_width.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        spinner_width.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinner_widthStateChanged(evt);
            }
        });

        spinner_miterLimit.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        spinner_miterLimit.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinner_miterLimitStateChanged(evt);
            }
        });

        spinner_dashOffset.setModel(new javax.swing.SpinnerNumberModel(Double.valueOf(0.0d), null, null, Double.valueOf(1.0d)));
        spinner_dashOffset.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                spinner_dashOffsetStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinner_width))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_cap, 0, 214, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_join, 0, 214, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinner_miterLimit))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(text_dash, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinner_dashOffset)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(spinner_width, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(combo_cap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combo_join, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(spinner_miterLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(text_dash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(spinner_dashOffset, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void text_dashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_dashActionPerformed
        export();
    }//GEN-LAST:event_text_dashActionPerformed

    private void text_dashFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_text_dashFocusLost
        export();
    }//GEN-LAST:event_text_dashFocusLost

    private void combo_capActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_capActionPerformed
        if (updating)
        {
            return;
        }

        export();
    }//GEN-LAST:event_combo_capActionPerformed

    private void combo_joinActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_joinActionPerformed
        if (updating)
        {
            return;
        }

        export();
    }//GEN-LAST:event_combo_joinActionPerformed

    private void spinner_widthStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinner_widthStateChanged
    {//GEN-HEADEREND:event_spinner_widthStateChanged
        export();
    }//GEN-LAST:event_spinner_widthStateChanged

    private void spinner_miterLimitStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinner_miterLimitStateChanged
    {//GEN-HEADEREND:event_spinner_miterLimitStateChanged
        export();
    }//GEN-LAST:event_spinner_miterLimitStateChanged

    private void spinner_dashOffsetStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinner_dashOffsetStateChanged
    {//GEN-HEADEREND:event_spinner_dashOffsetStateChanged
        export();
    }//GEN-LAST:event_spinner_dashOffsetStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combo_cap;
    private javax.swing.JComboBox combo_join;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JSpinner spinner_dashOffset;
    private javax.swing.JSpinner spinner_miterLimit;
    private javax.swing.JSpinner spinner_width;
    private javax.swing.JTextField text_dash;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getCustomEditor()
    {
        return this;
    }

    @Override
    public void customEditorCommit()
    {
        ed.setValue(new PropertyDataInline(curValue), true);
    }

    @Override
    public void customEditorCancel()
    {
        ed.setValue(initValue, false);
    }

}
