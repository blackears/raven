/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * StringCustomEditor.java
 *
 * Created on Jul 9, 2009, 1:33:25 PM
 */

package com.kitfox.raven.util.tree.property;

import com.kitfox.raven.util.text.TextEscape;
import com.kitfox.raven.util.tree.PropertyCustomEditor;
import com.kitfox.raven.util.tree.PropertyData;
import com.kitfox.raven.util.tree.PropertyDataInline;
import java.awt.Component;
import javax.swing.SwingUtilities;

/**
 *
 * @author kitfox
 */
public class StringCustomEditor extends javax.swing.JPanel
        implements PropertyCustomEditor
{
    private static final long serialVersionUID = 1;

    final StringEditor editor;
    boolean updating;

    PropertyData<String> initValue;
    PropertyData<String> curValue;

    /** Creates new form StringCustomEditor */
    public StringCustomEditor(StringEditor editor)
    {
        initComponents();
        this.editor = editor;
        curValue = initValue = editor.getValue();

        updateFromEditorSwing();
    }

    public void updateFromEditor()
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run() {
                updateFromEditorSwing();
            }
        });
    }

    private void updateFromEditorSwing()
    {
        updating = true;

        textArea_value.setText(
                TextEscape.unescapeSpecial(editor.getAsText()));

        updating = false;
    }

    private void setValue()
    {
        curValue = new PropertyDataInline<String>(
                textArea_value.getText());
        editor.setValue(curValue, false);
    }

    @Override
    public void customEditorCommit()
    {
        editor.setValue(curValue);
    }

    @Override
    public void customEditorCancel()
    {
        editor.setValue(initValue, false);
    }

    @Override
    public Component getCustomEditor()
    {
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textArea_value = new javax.swing.JTextArea();
        check_lineWrap = new javax.swing.JCheckBox();

        textArea_value.setColumns(20);
        textArea_value.setRows(5);
        textArea_value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textArea_valueKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(textArea_value);

        check_lineWrap.setText("Line wrap");
        check_lineWrap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_lineWrapActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                    .addComponent(check_lineWrap))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(check_lineWrap)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void textArea_valueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textArea_valueKeyReleased
        setValue();
    }//GEN-LAST:event_textArea_valueKeyReleased

    private void check_lineWrapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_lineWrapActionPerformed
        textArea_value.setLineWrap(check_lineWrap.isSelected());
    }//GEN-LAST:event_check_lineWrapActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox check_lineWrap;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textArea_value;
    // End of variables declaration//GEN-END:variables

}
