/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * StringCustomEditor.java
 *
 * Created on Jul 9, 2009, 1:33:25 PM
 */

package com.kitfox.raven.util.tree.property;

import com.kitfox.raven.util.tree.PropertyCustomEditor;
import com.kitfox.raven.util.tree.PropertyData;
import com.kitfox.raven.util.tree.PropertyDataInline;
import java.awt.Component;
import java.io.File;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author kitfox
 */
public class FileCustomEditor extends javax.swing.JPanel
        implements PropertyCustomEditor
{
    private static final long serialVersionUID = 1;

    final FileEditor editor;
    boolean updating;

    PropertyData<File> initValue;
    PropertyData<File> curValue;

    /** Creates new form StringCustomEditor */
    public FileCustomEditor(FileEditor editor)
    {
        initComponents();
        this.editor = editor;
        curValue = initValue = editor.getValue();

        updateFromEditorSwing();
    }

    private void browseForResource()
    {
        File file = new File(editor.getAsText());
        fileChooser.setCurrentDirectory(file);

        int res = fileChooser.showOpenDialog(this);

        if (res != JFileChooser.APPROVE_OPTION)
        {
            return;
        }

        file = fileChooser.getSelectedFile();
        String path = file.getPath();
        text_path.setText(path);
        editor.setAsText(path);
    }

    private void updateFromEditorSwing()
    {
        updating = true;

        text_path.setText(editor.getAsText());

        updating = false;
    }

    private void setValue(String value)
    {
        File file;
        file = new File(value);

        curValue = value == null ? null
                : new PropertyDataInline<File>(file);
        editor.setValue(curValue, false);
    }

    @Override
    public void customEditorCommit()
    {
        editor.setValue(curValue);
    }

    @Override
    public void customEditorCancel()
    {
        editor.setValue(initValue, false);
    }

    @Override
    public Component getCustomEditor()
    {
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        text_path = new javax.swing.JTextField();
        bn_browse = new javax.swing.JButton();

        jLabel1.setText("File");

        text_path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_pathActionPerformed(evt);
            }
        });
        text_path.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                text_pathFocusLost(evt);
            }
        });

        bn_browse.setText("...");
        bn_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_browseActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_path, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bn_browse)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(text_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bn_browse))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bn_browseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bn_browseActionPerformed
        browseForResource();
    }//GEN-LAST:event_bn_browseActionPerformed

    private void text_pathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_pathActionPerformed
        if (updating)
        {
            return;
        }

//        editor.setAsText(text_path.getText());
        setValue(text_path.getText());

    }//GEN-LAST:event_text_pathActionPerformed

    private void text_pathFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_text_pathFocusLost
        if (updating)
        {
            return;
        }

//        editor.setAsText(text_path.getText());
        setValue(text_path.getText());

    }//GEN-LAST:event_text_pathFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_browse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JTextField text_path;
    // End of variables declaration//GEN-END:variables

    JFileChooser fileChooser = new JFileChooser();
    {
        FileFilter filter = new FileFilter()
        {
            @Override
            public boolean accept(File f) {
                //return f.isDirectory() || f.getName().endsWith(".xml");
                return true;
            }

            @Override
            public String getDescription() {
                return "Any file (*.*)";
            }
        };
        fileChooser.setFileFilter(filter);
        fileChooser.setCurrentDirectory(new File("work"));
    }

}
