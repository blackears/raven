/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * FontCustomEditor.java
 *
 * Created on Jan 24, 2011, 2:01:30 PM
 */

package com.kitfox.raven.util.tree.property;

import com.kitfox.raven.util.text.FontEditorPanel;
import com.kitfox.raven.util.tree.PropertyCustomEditor;
import com.kitfox.raven.util.tree.PropertyData;
import com.kitfox.raven.util.tree.PropertyDataInline;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import javax.swing.SwingUtilities;

/**
 *
 * @author kitfox
 */
public class FontCustomEditor extends javax.swing.JPanel
        implements PropertyCustomEditor, PropertyChangeListener
{
    final FontEditor editor;
    FontEditorPanel panelFont = new FontEditorPanel();

    PropertyData<Font> initValue;
//    PropertyData<Font> curValue;

    boolean updating = true;

    /** Creates new form FontCustomEditor */
    public FontCustomEditor(FontEditor editor)
    {
        this.editor = editor;
        initComponents();

        add(panelFont, BorderLayout.CENTER);

        initValue = editor.getValue();
//        curValue = initValue = editor.getValue();
//        fontValue = editor.getValueFlat();
//        panelFont.setFontValue(editor.getValueFlat());

        panelFont.addPropertyChangeListener(FontEditorPanel.PROP_FONTVALUE,
                this);

        updateFromEditorSwing();
    }

    public void updateFromEditor()
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run() {
                updateFromEditorSwing();
            }
        });
    }

    private void updateFromEditorSwing()
    {
        updating = true;

        panelFont.setFontValue(editor.getValueFlat());

//        Font font = editor.getValueFlat();
//        fontValue = font;
//        Font comboFont = fontMap.get(font.getFamily());
//        combo_family.setSelectedItem(comboFont);
//
//        text_size.setText("" + font.getSize());
//        check_bold.setSelected(font.isBold());
//        check_italic.setSelected(font.isItalic());

        updating = false;
//        previewPanel.repaint();
    }

    @Override
    public void customEditorCommit()
    {
//        editor.setValue(curValue);
        Font font = panelFont.getFontValue();
        editor.setValue(new PropertyDataInline<Font>(font));
    }

    @Override
    public void customEditorCancel()
    {
        editor.setValue(initValue, false);
    }

    @Override
    public Component getCustomEditor()
    {
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (updating)
        {
            return;
        }

        Font font = panelFont.getFontValue();
        editor.setValue(new PropertyDataInline<Font>(font), false);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
