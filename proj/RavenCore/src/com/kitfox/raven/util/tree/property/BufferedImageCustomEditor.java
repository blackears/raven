/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * FontCustomEditor.java
 *
 * Created on Jan 24, 2011, 2:01:30 PM
 */

package com.kitfox.raven.util.tree.property;

import com.kitfox.raven.util.resource.ResourceIndex;
import com.kitfox.raven.util.resource.ResourceProvider;
import com.kitfox.raven.util.tree.PropertyCustomEditor;
import com.kitfox.raven.util.tree.PropertyData;
import com.kitfox.raven.util.tree.PropertyDataInline;
import com.kitfox.raven.util.tree.PropertyDataResource;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.File;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;

/**
 *
 * @author kitfox
 */
public class BufferedImageCustomEditor extends javax.swing.JPanel
        implements PropertyCustomEditor
{
    JFileChooser fileChooser = new JFileChooser();

    final BufferedImageEditor editor;

    PropertyData<BufferedImage> initValue;
    BufferedImage curThumb;

    boolean updating = true;

    /** Creates new form FontCustomEditor */
    public BufferedImageCustomEditor(BufferedImageEditor editor)
    {
        this.editor = editor;
        initComponents();

        panel_preview.add(new ImageThumbPanel(), BorderLayout.CENTER);

        initValue = editor.getValue();

        ResourceProvider<BufferedImage> prov =
                ResourceIndex.inst().getProvider(BufferedImage.class);
        fileChooser.setFileFilter(prov.getFileFilter());

        updateFromEditorSwing();
    }

    public void updateFromEditor()
    {
        SwingUtilities.invokeLater(new Runnable()
        {
            @Override
            public void run() {
                updateFromEditorSwing();
            }
        });
    }

    private void updateFromEditorSwing()
    {
        updating = true;

        PropertyData<BufferedImage> data = editor.getValue();
        curThumb = data.getValue(editor.getDocument());
        if (data instanceof PropertyDataResource)
        {
            URI uri = ((PropertyDataResource)data).getUri();
            text_uri.setText(uri.toString());
            check_embed.setSelected(false);
        }
        else
        {
//            String text = editor.getAsText();
            text_uri.setText("");
            check_embed.setSelected(curThumb != null);
        }
        repaint();

        updating = false;
    }

    @Override
    public void customEditorCommit()
    {
        if (check_embed.isSelected())
        {
            editor.setValue(new PropertyDataInline<BufferedImage>(curThumb));
        }
        else
        {
            try
            {
                URI uri = new URI(text_uri.getText());
                editor.setValue(new PropertyDataResource<BufferedImage>(uri));
            } catch (URISyntaxException ex)
            {
                Logger.getLogger(BufferedImageCustomEditor.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    @Override
    public void customEditorCancel()
    {
        editor.setValue(initValue, false);
    }

    @Override
    public Component getCustomEditor()
    {
        return this;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        text_uri = new javax.swing.JTextField();
        bn_browse = new javax.swing.JButton();
        panel_preview = new javax.swing.JPanel();
        check_embed = new javax.swing.JCheckBox();

        jLabel1.setText("URI");

        text_uri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_uriActionPerformed(evt);
            }
        });

        bn_browse.setText("...");
        bn_browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_browseActionPerformed(evt);
            }
        });

        panel_preview.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        panel_preview.setLayout(new java.awt.BorderLayout());

        check_embed.setText("embed");
        check_embed.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_embedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panel_preview, javax.swing.GroupLayout.DEFAULT_SIZE, 334, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(text_uri, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bn_browse))
                    .addComponent(check_embed, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(text_uri, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(bn_browse))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(check_embed)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_preview, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bn_browseActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_browseActionPerformed
    {//GEN-HEADEREND:event_bn_browseActionPerformed
        PropertyData<BufferedImage> data = editor.getValue();
        if (data instanceof PropertyDataResource)
        {
            PropertyDataResource res = (PropertyDataResource)data;
            URI uri = res.getUri();
            if (uri != null)
            {
                File file = new File(uri);
                fileChooser.setSelectedFile(file);
            }
        }

        if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();
            String text = file.toURI().toString();
            text_uri.setText(text);
            editor.setAsText(text);
            curThumb = editor.getValueFlat();

            repaint();
//            if (check_embed.isSelected())
//            {
//                editor.setValue(curThumb);
//            }
        }

    }//GEN-LAST:event_bn_browseActionPerformed

    private void text_uriActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_text_uriActionPerformed
    {//GEN-HEADEREND:event_text_uriActionPerformed
        String text = text_uri.getText();
        editor.setAsText(text);
        curThumb = editor.getValueFlat();

        repaint();
        
//        if (check_embed.isSelected())
//        {
//            editor.setValue(curThumb);
//        }

    }//GEN-LAST:event_text_uriActionPerformed

    private void check_embedActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_check_embedActionPerformed
    {//GEN-HEADEREND:event_check_embedActionPerformed

    }//GEN-LAST:event_check_embedActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_browse;
    private javax.swing.JCheckBox check_embed;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panel_preview;
    private javax.swing.JTextField text_uri;
    // End of variables declaration//GEN-END:variables

    class ImageThumbPanel extends JPanel
    {

        @Override
        protected void paintComponent(Graphics g)
        {
            super.paintComponent(g);

            int width = getWidth();
            int height = getHeight();
            g.setColor(Color.white);
            g.fillRect(0, 0, width, height);
            if (curThumb != null)
            {
                g.drawImage(curThumb, 0, 0, width, height, null);
            }
        }

    }

}
