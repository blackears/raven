/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ColorPanel.java
 *
 * Created on Jan 17, 2011, 8:47:22 PM
 */

package com.kitfox.raven.util.text;

import com.kitfox.raven.util.text.FontEditorPanel;
import com.kitfox.raven.util.text.Justify;
import java.awt.BorderLayout;
import java.awt.Font;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author kitfox
 */
public class TextPropertiesPanel extends javax.swing.JPanel
        implements PropertyChangeListener
{
    FontEditorPanel fontPanel = new FontEditorPanel();

    public static final String PROP_JUSTIFY = "justify";
    private Justify justify = Justify.LEFT;

    public static final String PROP_FONTVALUE = "fontValue";
    private Font fontValue;

    boolean updating;

    /** Creates new form ColorPanel */
    public TextPropertiesPanel()
    {
        initComponents();

        panel_fontArea.add(fontPanel, BorderLayout.CENTER);
        fontPanel.addPropertyChangeListener(FontEditorPanel.PROP_FONTVALUE, this);

        update();
    }

    private void update()
    {
        updating = true;

        switch (justify)
        {
            case LEFT:
                bn_left.setSelected(true);
                break;
            case CENTER:
                bn_center.setSelected(true);
                break;
            case RIGHT:
                bn_right.setSelected(true);
                break;
            case JUSTIFY:
                bn_justify.setSelected(true);
                break;
        }

        fontPanel.setFontValue(fontValue);

        updating = false;
    }

    /**
     * @return the justify
     */
    public Justify getJustify()
    {
        return justify;
    }

    /**
     * @param justify the justify to set
     */
    public void setJustify(Justify justify)
    {
        Justify old = this.justify;
        this.justify = justify;
        update();
        firePropertyChange(PROP_JUSTIFY, old, justify);
    }

    /**
     * @return the fontValue
     */
    public Font getFontValue()
    {
        return fontValue;
    }

    /**
     * @param fontValue the fontValue to set
     */
    public void setFontValue(Font fontValue)
    {
        Font old = this.fontValue;
        this.fontValue = fontValue;
        update();
        firePropertyChange(PROP_FONTVALUE, old, fontValue);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_justify = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        bn_left = new javax.swing.JToggleButton();
        bn_center = new javax.swing.JToggleButton();
        bn_right = new javax.swing.JToggleButton();
        bn_justify = new javax.swing.JToggleButton();
        panel_fontArea = new javax.swing.JPanel();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Justification"));

        buttonGroup_justify.add(bn_left);
        bn_left.setText("Left");
        bn_left.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_leftActionPerformed(evt);
            }
        });
        jPanel1.add(bn_left);

        buttonGroup_justify.add(bn_center);
        bn_center.setText("Center");
        bn_center.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_centerActionPerformed(evt);
            }
        });
        jPanel1.add(bn_center);

        buttonGroup_justify.add(bn_right);
        bn_right.setText("Right");
        bn_right.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_rightActionPerformed(evt);
            }
        });
        jPanel1.add(bn_right);

        buttonGroup_justify.add(bn_justify);
        bn_justify.setText("Justify");
        bn_justify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_justifyActionPerformed(evt);
            }
        });
        jPanel1.add(bn_justify);

        add(jPanel1, java.awt.BorderLayout.CENTER);

        panel_fontArea.setLayout(new java.awt.BorderLayout());
        add(panel_fontArea, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void bn_leftActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_leftActionPerformed
    {//GEN-HEADEREND:event_bn_leftActionPerformed
        if (updating)
        {
            return;
        }

        setJustify(Justify.LEFT);
    }//GEN-LAST:event_bn_leftActionPerformed

    private void bn_centerActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_centerActionPerformed
    {//GEN-HEADEREND:event_bn_centerActionPerformed
        if (updating)
        {
            return;
        }

        setJustify(Justify.CENTER);
    }//GEN-LAST:event_bn_centerActionPerformed

    private void bn_rightActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_rightActionPerformed
    {//GEN-HEADEREND:event_bn_rightActionPerformed
        if (updating)
        {
            return;
        }

        setJustify(Justify.RIGHT);
    }//GEN-LAST:event_bn_rightActionPerformed

    private void bn_justifyActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_justifyActionPerformed
    {//GEN-HEADEREND:event_bn_justifyActionPerformed
        if (updating)
        {
            return;
        }

        setJustify(Justify.JUSTIFY);
    }//GEN-LAST:event_bn_justifyActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton bn_center;
    private javax.swing.JToggleButton bn_justify;
    private javax.swing.JToggleButton bn_left;
    private javax.swing.JToggleButton bn_right;
    private javax.swing.ButtonGroup buttonGroup_justify;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel panel_fontArea;
    // End of variables declaration//GEN-END:variables

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (updating)
        {
            return;
        }

        setFontValue(fontPanel.getFontValue());
    }
}
