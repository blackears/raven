/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * StringCustomEditor.java
 *
 * Created on Jul 9, 2009, 1:33:25 PM
 */

package com.kitfox.raven.util.text;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.font.FontRenderContext;
import java.awt.font.GlyphVector;
import java.awt.geom.Rectangle2D;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.ListCellRenderer;

/**
 *
 * @author kitfox
 */
public class FontEditorPanel extends javax.swing.JPanel
{
    private static final long serialVersionUID = 1;

    boolean updating = true;

    Font fontValue = new Font(Font.SANS_SERIF, Font.PLAIN, 12);
    public static final String PROP_FONTVALUE = "fontValue";

    Preview previewPanel = new Preview();

//    static final LinkedHashMap<String, Font> fontMap = new LinkedHashMap<String, Font>();
//    static {
//        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
//        String[] fontFam = ge.getAvailableFontFamilyNames();
//        for (int i = 0; i < fontFam.length; ++i)
//        {
//            Font font = new Font(fontFam[i], Font.PLAIN, 20);
//            fontMap.put(fontFam[i], font);
//        }
//    }

    /** Creates new form StringCustomEditor */
    public FontEditorPanel()
    {
        initComponents();


        combo_family.setRenderer(new CellRenderer());
        for (Font font: SystemFontLibrary.inst().getFonts())
        {
            combo_family.addItem(font);
        }

        panel_preview.add(previewPanel, BorderLayout.CENTER);

        update();
    }

    private void update()
    {
        updating = true;

        Font comboFont = SystemFontLibrary.inst()
                .getFont(fontValue.getFamily());
        combo_family.setSelectedItem(comboFont);

//        text_size.setText("" + fontValue.getSize());
        spinner_size.setValue(fontValue.getSize());
        check_bold.setSelected(fontValue.isBold());
        check_italic.setSelected(fontValue.isItalic());

        updating = false;
        previewPanel.repaint();
    }

    public Font getFontValue()
    {
        return fontValue;
    }

    public void setFontValue(Font fontValue)
    {
        Font oldFont = this.fontValue;
        this.fontValue = fontValue;
        updateUI();
        firePropertyChange(PROP_FONTVALUE, oldFont, fontValue);
    }

    private void buildFont()
    {
        if (updating)
        {
            return;
        }

        Font comboFont = (Font)combo_family.getSelectedItem();
        if (comboFont == null)
        {
            comboFont = SystemFontLibrary.inst()
                    .getFont(Font.SERIF);
        }

//        int size = NumberText.findInteger(text_size.getText(), 12);
        int size = (Integer)spinner_size.getValue();
        int style = (check_bold.isSelected() ? Font.BOLD : 0)
                | (check_italic.isSelected() ? Font.ITALIC : 0);
        Font font = comboFont.deriveFont(style, size);

        setFontValue(font);
//        curValue = new PropertyDataInline<Font>(font);
//        fontValue = font;
//        editor.setValue(curValue, false);

        previewPanel.repaint();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        check_bold = new javax.swing.JCheckBox();
        check_italic = new javax.swing.JCheckBox();
        panel_preview = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        text_preview = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        combo_family = new javax.swing.JComboBox();
        bn_serif = new javax.swing.JButton();
        bn_sans = new javax.swing.JButton();
        bn_mono = new javax.swing.JButton();
        spinner_size = new javax.swing.JSpinner();

        check_bold.setText("Bold");
        check_bold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_boldActionPerformed(evt);
            }
        });

        check_italic.setText("Italic");
        check_italic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                check_italicActionPerformed(evt);
            }
        });

        panel_preview.setBorder(javax.swing.BorderFactory.createTitledBorder("Preview"));
        panel_preview.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Size");

        jLabel2.setText("Preview Text");

        text_preview.setText("The quick brown fox. 12345");
        text_preview.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                text_previewKeyReleased(evt);
            }
        });

        jLabel3.setText("Font Family");

        combo_family.setMaximumRowCount(30);
        combo_family.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_familyActionPerformed(evt);
            }
        });

        bn_serif.setText("Serif");
        bn_serif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_serifActionPerformed(evt);
            }
        });

        bn_sans.setText("Sans");
        bn_sans.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_sansActionPerformed(evt);
            }
        });

        bn_mono.setText("Mono");
        bn_mono.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_monoActionPerformed(evt);
            }
        });

        spinner_size.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(12), Integer.valueOf(0), null, Integer.valueOf(1)));
        spinner_size.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spinner_sizeStateChanged(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(combo_family, 0, 302, Short.MAX_VALUE))
                    .addComponent(panel_preview, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinner_size, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_bold)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(check_italic)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bn_serif)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bn_sans)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bn_mono))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(text_preview, javax.swing.GroupLayout.DEFAULT_SIZE, 294, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(combo_family, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(check_bold)
                    .addComponent(check_italic)
                    .addComponent(bn_serif)
                    .addComponent(bn_sans)
                    .addComponent(bn_mono)
                    .addComponent(spinner_size, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(text_preview, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_preview, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void check_italicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_italicActionPerformed
        buildFont();
    }//GEN-LAST:event_check_italicActionPerformed

    private void combo_familyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_familyActionPerformed
        buildFont();
    }//GEN-LAST:event_combo_familyActionPerformed

    private void check_boldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_check_boldActionPerformed
        buildFont();
    }//GEN-LAST:event_check_boldActionPerformed

    private void text_previewKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_previewKeyReleased
        previewPanel.repaint();
    }//GEN-LAST:event_text_previewKeyReleased

    private void bn_serifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bn_serifActionPerformed
        combo_family.setSelectedItem(SystemFontLibrary.inst()
                .getFont(Font.SERIF));
    }//GEN-LAST:event_bn_serifActionPerformed

    private void bn_sansActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bn_sansActionPerformed
        combo_family.setSelectedItem(SystemFontLibrary.inst()
                .getFont(Font.SANS_SERIF));
    }//GEN-LAST:event_bn_sansActionPerformed

    private void bn_monoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bn_monoActionPerformed
        combo_family.setSelectedItem(SystemFontLibrary.inst()
                .getFont(Font.MONOSPACED));
    }//GEN-LAST:event_bn_monoActionPerformed

    private void spinner_sizeStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_spinner_sizeStateChanged
    {//GEN-HEADEREND:event_spinner_sizeStateChanged
        buildFont();
    }//GEN-LAST:event_spinner_sizeStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_mono;
    private javax.swing.JButton bn_sans;
    private javax.swing.JButton bn_serif;
    private javax.swing.JCheckBox check_bold;
    private javax.swing.JCheckBox check_italic;
    private javax.swing.JComboBox combo_family;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel panel_preview;
    private javax.swing.JSpinner spinner_size;
    private javax.swing.JTextField text_preview;
    // End of variables declaration//GEN-END:variables

    class Preview extends JPanel
    {
        public Preview()
        {
            setOpaque(true);
        }

        @Override
        protected void paintComponent(Graphics gg)
        {
            if (fontValue == null)
            {
                return;
            }

            Graphics2D g = (Graphics2D)gg;

            g.setColor(getBackground());
            g.fillRect(0, 0, getWidth(), getHeight());
            
            FontRenderContext frc = g.getFontRenderContext();
            GlyphVector gv = fontValue.createGlyphVector(frc, text_preview.getText());

            Rectangle2D bounds = gv.getLogicalBounds();
            float dw = getWidth() - (float)bounds.getWidth();
            float dh = getHeight() - (float)bounds.getHeight();

            g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            g.setColor(Color.BLACK);
            g.drawGlyphVector(gv, 
                    dw / 2 - (float)bounds.getX(),
                    dh / 2 - (float)bounds.getY());
        }

    }

    class CellRenderer extends JLabel
            implements ListCellRenderer
    {
        public CellRenderer()
        {
            setOpaque(true);
        }


        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            if (isSelected)
            {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            }
            else
            {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }

            Font font = (Font)value;
            setText(font.getFamily());
            setToolTipText(font.getFamily());
            setFont(font);

            return this;
        }
    }

}
