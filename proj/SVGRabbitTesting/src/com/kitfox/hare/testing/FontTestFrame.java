/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * FontTestFrame.java
 *
 * Created on Oct 11, 2010, 9:22:48 PM
 */

package com.kitfox.hare.testing;

import com.kitfox.rabbit.font.FontShape;
import com.kitfox.rabbit.font.Glyph;
import com.kitfox.rabbit.font.svg.SimpleSVGFontLoader;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.util.ArrayList;

/**
 *
 * @author kitfox
 */
public class FontTestFrame extends javax.swing.JFrame {

    /** Creates new form FontTestFrame */
    public FontTestFrame() {
        initComponents();

        setSize(640, 480);
    }

    @Override
    public void paint(Graphics gg)
    {
        super.paint(gg);

        Graphics2D g = (Graphics2D)gg;

        FontShape fs = SimpleSVGFontLoader.loadFont(
                getClass().getResourceAsStream("/Serif.svg"));

        g.translate(20, 100);

        float fontSize = 60;
        float height = fs.getFontFace().getAscent() + fs.getFontFace().getDescent();
        float scale = fontSize / height;
        g.scale(scale, scale);

        ArrayList<Glyph> glyphs = fs.toGlyphs("Inventory");
        for (int i = 0; i < glyphs.size(); ++i)
        {
            Glyph glyph = glyphs.get(i);
            Shape shape = glyph.getShape();

            g.draw(shape);
            g.translate(glyph.getHorixAdvX(), 0);
        }
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FontTestFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
