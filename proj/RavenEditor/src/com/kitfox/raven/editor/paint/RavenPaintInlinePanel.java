/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * StrokeStyleCustomEditor.java
 *
 * Created on Sep 17, 2009, 8:14:59 PM
 */

package com.kitfox.raven.editor.paint;

import com.kitfox.game.control.color.ColorStyleEditorPanel;
import com.kitfox.game.control.color.GradientStyleEditorPanel;
import java.awt.BorderLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;

/**
 *
 * @author kitfox
 */
public class RavenPaintInlinePanel extends javax.swing.JPanel
        implements PropertyChangeListener
{
    private static final long serialVersionUID = 1;

    PaintState paintState;

    ColorStyleEditorPanel colorPanel = new ColorStyleEditorPanel();
    GradientStyleEditorPanel gradientPanel = new GradientStyleEditorPanel();

    boolean updating = true;

    public static final String PROP_PAINT = "paint";
    RavenPaint paint;

    /** Creates new form StrokeStyleCustomEditor */
    public RavenPaintInlinePanel()
    {
        initComponents();

        for (PaintState ps: PaintState.values())
        {
            combo_type.addItem(ps);
        }

        colorPanel.addPropertyChangeListener(
                ColorStyleEditorPanel.PROP_COLOR, this);
        gradientPanel.addPropertyChangeListener(
                GradientStyleEditorPanel.PROP_GRADIENT, this);

        buildFromPaint();
    }

    public RavenPaint getPaint()
    {
        return paint;
    }

    public void setPaint(RavenPaint paint)
    {
        RavenPaint oldPaint = this.paint;
        this.paint = paint;
        buildFromPaint();
        firePropertyChange(PROP_PAINT, oldPaint, paint);
    }

    private void buildFromPaint()
    {
        updating = true;

        if (paint == null || paint == RavenPaintNone.PAINT)
        {
            combo_type.setSelectedItem(PaintState.NONE);
        }
        else if (paint instanceof RavenPaintColor)
        {
            combo_type.setSelectedItem(PaintState.COLOR);
            colorPanel.setColor(((RavenPaintColor)paint).getColor());
        }
        else if (paint instanceof RavenPaintGradient)
        {
            combo_type.setSelectedItem(PaintState.GRADIENT);
            gradientPanel.setGradient(
                    ((RavenPaintGradient)paint).getGradient());
        }

        synchDisplay();

        updating = false;
    }

    private void synchDisplay()
    {
        PaintState type = (PaintState)combo_type.getSelectedItem();
        if (type != paintState)
        {
            panel_workArea.removeAll();
            switch (type)
            {
                case COLOR:
                    panel_workArea.add(colorPanel, BorderLayout.CENTER);
                    break;
                case GRADIENT:
                    panel_workArea.add(gradientPanel, BorderLayout.CENTER);
                    break;
            }
            paintState = type;

            revalidate();
            repaint();
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == colorPanel)
        {
            setPaint(new RavenPaintColor(colorPanel.getColor()));
        }
        else if (evt.getSource() == gradientPanel)
        {
            setPaint(new RavenPaintGradient(gradientPanel.getGradient()));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        combo_type = new javax.swing.JComboBox();
        panel_workArea = new javax.swing.JPanel();

        jLabel1.setText("Type");

        combo_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_typeActionPerformed(evt);
            }
        });

        panel_workArea.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(combo_type, 0, 316, Short.MAX_VALUE)
                .addContainerGap())
            .addComponent(panel_workArea, javax.swing.GroupLayout.DEFAULT_SIZE, 364, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(combo_type, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel_workArea, javax.swing.GroupLayout.DEFAULT_SIZE, 238, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void combo_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_typeActionPerformed

        if (updating)
        {
            return;
        }

        PaintState type = (PaintState)combo_type.getSelectedItem();

        switch (type)
        {
            case NONE:
                setPaint(RavenPaintNone.PAINT);
                break;
            case COLOR:
                setPaint(new RavenPaintColor(colorPanel.getColor()));
                break;
            case GRADIENT:
                setPaint(new RavenPaintGradient(
                        gradientPanel.getGradient()));
                break;
        }

        synchDisplay();

    }//GEN-LAST:event_combo_typeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox combo_type;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel panel_workArea;
    // End of variables declaration//GEN-END:variables


    //--------------------------------

    static enum PaintState
    {
        NONE, COLOR, GRADIENT
    }
}
