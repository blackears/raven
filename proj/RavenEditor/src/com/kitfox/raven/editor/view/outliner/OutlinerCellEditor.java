/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * LayerNavigatorCellEditorPanel.java
 *
 * Created on Jun 24, 2009, 12:42:43 PM
 */

package com.kitfox.raven.editor.view.outliner;

import java.awt.Component;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.EventObject;
import javax.swing.JTree;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.tree.TreeCellEditor;

/**
 *
 * @author kitfox
 */
public class OutlinerCellEditor extends javax.swing.JPanel
        implements TreeCellEditor
{
    private static final long serialVersionUID = 1;

    //Layer value;
    String value;

    ArrayList<CellEditorListener> listeners = new ArrayList<CellEditorListener>();

    /** Creates new form LayerNavigatorCellEditorPanel */
    public OutlinerCellEditor()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        text_name = new javax.swing.JTextField();

        setLayout(new java.awt.BorderLayout());

        text_name.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_nameActionPerformed(evt);
            }
        });
        text_name.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                text_nameKeyPressed(evt);
            }
        });
        add(text_name, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void text_nameKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_nameKeyPressed
        switch (evt.getKeyCode())
        {
            case KeyEvent.VK_ESCAPE:
                fireCanceled();
                break;
        }
    }//GEN-LAST:event_text_nameKeyPressed

    private void text_nameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_nameActionPerformed
        value = text_name.getText();
        fireStopped();
    }//GEN-LAST:event_text_nameActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField text_name;
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getTreeCellEditorComponent(JTree tree, Object value, boolean isSelected, boolean expanded, boolean leaf, int row)
    {
        OutlinerNode node = (OutlinerNode)value;
        text_name.setText(node.getName());
        this.value = node.getName();

        return this;
    }

    @Override
    public Object getCellEditorValue()
    {
        return value;
    }

    @Override
    public boolean isCellEditable(EventObject anEvent)
    {
        if (anEvent instanceof MouseEvent)
        {
            MouseEvent evt = (MouseEvent)anEvent;
            if (evt.getClickCount() >= 3)
            {
                return true;
            }
        }
        return false;
    }

    @Override
    public boolean shouldSelectCell(EventObject anEvent)
    {
        return false;
    }

    @Override
    public boolean stopCellEditing()
    {
        value = text_name.getText();
        return true;
    }

    @Override
    public void cancelCellEditing()
    {
    }

    @Override
    public void addCellEditorListener(CellEditorListener l)
    {
        listeners.add(l);
    }

    @Override
    public void removeCellEditorListener(CellEditorListener l)
    {
        listeners.remove(l);
    }

    public void fireCanceled()
    {
        ChangeEvent evt = new ChangeEvent(this);
        for (CellEditorListener l: new ArrayList<CellEditorListener>(listeners))
        {
            l.editingCanceled(evt);
        }
    }

    public void fireStopped()
    {
        ChangeEvent evt = new ChangeEvent(this);
        for (CellEditorListener l: new ArrayList<CellEditorListener>(listeners))
        {
            l.editingStopped(evt);
        }
    }

}
