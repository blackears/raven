/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DisplayPanel.java
 *
 * Created on Nov 12, 2010, 10:46:41 PM
 */

package com.kitfox.raven.editor.view.tools;

import com.kitfox.raven.editor.RavenEditor;
import com.kitfox.raven.editor.node.tools.ToolPalette;
import com.kitfox.raven.editor.node.tools.ToolPaletteEvent;
import com.kitfox.raven.editor.node.tools.ToolPaletteListener;
import com.kitfox.raven.editor.node.tools.ToolPaletteWeakListener;
import com.kitfox.raven.editor.node.tools.ToolProvider;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.HashMap;
import javax.swing.JPopupMenu;
import javax.swing.JToggleButton;

/**
 *
 * @author kitfox
 */
public class ToolsPanel extends javax.swing.JPanel
        implements ToolPaletteListener
{
    final RavenEditor editor;
    ToolPaletteWeakListener paletteListener;

    HashMap<ToolProvider, ToolButton> buttonMap = new HashMap<ToolProvider, ToolButton>();

    boolean updating;

    /** Creates new form DisplayPanel */
    public ToolsPanel(RavenEditor editor)
    {
        this.editor = editor;

        ToolPalette pal = editor.getToolManager().getPalette();
        paletteListener = new ToolPaletteWeakListener(this, pal);
        pal.addToolPaletteListener(paletteListener);

        initComponents();

        for (ToolProvider prov: pal.getToolList())
        {
            ToolButton bn = new ToolButton(prov);
            buttonGroup_tools.add(bn);
            buttonMap.put(prov, bn);
            add(bn);
        }
    }

    @Override
    public void currentToolChanged(ToolPaletteEvent evt)
    {
        ToolProvider provider = evt.getCurrentTool();
        ToolButton bn = buttonMap.get(provider);
        if (bn != null)
        {
            bn.setSelected(true);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_tools = new javax.swing.ButtonGroup();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup_tools;
    // End of variables declaration//GEN-END:variables
    // End of variables declaration

    // End of variables declaration
    // End of variables declaration

    class ToolButton extends JToggleButton
            implements ActionListener, MouseListener
    {
        private final ToolProvider prov;

        public ToolButton(ToolProvider prov)
        {
            super(prov.getIcon());
            this.prov = prov;
            setToolTipText(prov.getName());
            setMargin(new Insets(2, 2, 2, 2));

            addActionListener(this);
            addMouseListener(this);
        }

        private void showPopup(MouseEvent evt)
        {
            JPopupMenu menu = prov.createPopup();
            if (menu == null)
            {
                return;
            }
            menu.show(this, evt.getX(), evt.getY());
        }

        @Override
        public void actionPerformed(ActionEvent e)
        {
            ToolPalette palette = editor.getToolManager().getPalette();
            palette.setCurrentTool(prov);
        }

        @Override
        public void mouseClicked(MouseEvent e) {
        }

        @Override
        public void mousePressed(MouseEvent e)
        {
            if (e.isPopupTrigger())
            {
                showPopup(e);
            }
        }

        @Override
        public void mouseReleased(MouseEvent e)
        {
            if (e.isPopupTrigger())
            {
                showPopup(e);
            }
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

    }

}
