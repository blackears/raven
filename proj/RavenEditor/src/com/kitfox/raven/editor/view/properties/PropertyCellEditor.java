/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * PropertyCellEditor.java
 *
 * Created on Jul 8, 2009, 12:32:31 PM
 */

package com.kitfox.raven.editor.view.properties;

import com.kitfox.raven.util.tree.PropertyCustomEditor;
import com.kitfox.raven.util.tree.PropertyWrapperEditor;
import com.kitfox.raven.util.tree.PropertyWrapperEditorListener;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Window;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.EventObject;
import javax.swing.JDialog;
import javax.swing.JTable;
import javax.swing.SwingUtilities;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.table.TableCellEditor;

/**
 *
 * @author kitfox
 */
public class PropertyCellEditor extends javax.swing.JPanel
        implements TableCellEditor, PropertyChangeListener,
        PropertyWrapperEditorListener
{
    private static final long serialVersionUID = 1;

    PropertyWrapperEditor ed;
    ArrayList<CellEditorListener> listeners = new ArrayList<CellEditorListener>();

    boolean building;

    /** Creates new form PropertyCellEditor */
    public PropertyCellEditor()
    {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bn_advancedEditor = new javax.swing.JButton();
        text_value = new javax.swing.JTextField();
        combo_value = new javax.swing.JComboBox();

        setLayout(new java.awt.BorderLayout());

        bn_advancedEditor.setText("...");
        bn_advancedEditor.setMargin(new java.awt.Insets(2, 2, 2, 2));
        bn_advancedEditor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_advancedEditorActionPerformed(evt);
            }
        });
        add(bn_advancedEditor, java.awt.BorderLayout.LINE_END);

        text_value.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                text_valueMouseWheelMoved(evt);
            }
        });
        text_value.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                text_valueMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                text_valueMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                text_valueMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                text_valueMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                text_valueMouseReleased(evt);
            }
        });
        text_value.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                text_valueMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                text_valueMouseMoved(evt);
            }
        });
        text_value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_valueActionPerformed(evt);
            }
        });
        text_value.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                text_valueKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                text_valueKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                text_valueKeyTyped(evt);
            }
        });
        add(text_value, java.awt.BorderLayout.CENTER);

        combo_value.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                combo_valueMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                combo_valueMouseReleased(evt);
            }
        });
        combo_value.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_valueActionPerformed(evt);
            }
        });
        add(combo_value, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void bn_advancedEditorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bn_advancedEditorActionPerformed
        JDialog dlg =
                new JDialog(SwingUtilities.getWindowAncestor(this), JDialog.DEFAULT_MODALITY_TYPE);
        PropertyCustomEditor xact = ed.createCustomEditor();
        PropertyCustomEditorPanel custom = new PropertyCustomEditorPanel(
                xact.getCustomEditor(), dlg);
        dlg.getContentPane().add(custom, BorderLayout.CENTER);
        
        dlg.pack();
        Window win = SwingUtilities.getWindowAncestor(this);
        if (win != null)
        {
            dlg.setLocation(win.getX(), win.getY());
        }

        dlg.setVisible(true);

        if (custom.isOkay())
        {
            xact.customEditorCommit();
        }
        else
        {
            xact.customEditorCancel();
        }
        
    }//GEN-LAST:event_bn_advancedEditorActionPerformed

    private void text_valueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_valueActionPerformed
        ed.setAsText(text_value.getText());
        
        fireEditingStopped();
        ed.removePropertyChangeListener(this);
    }//GEN-LAST:event_text_valueActionPerformed

    private void text_valueKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_valueKeyReleased
        if (ed instanceof KeyListener)
        {
            ((KeyListener)ed).keyReleased(evt);
            if (evt.isConsumed())
            {
                return;
            }
        }

        switch (evt.getKeyCode())
        {
            case KeyEvent.VK_ESCAPE:
            {
                fireEditingCanceled();
                ed.removePropertyChangeListener(this);
                break;
            }
        }
    }//GEN-LAST:event_text_valueKeyReleased

    private void combo_valueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_valueActionPerformed
        if (building)
        {
            return;
        }

        String enumName = (String)combo_value.getSelectedItem();
        if (enumName == null)
        {
            return;
        }
        text_value.setText(enumName);  //stopCellEditing() will read this
        ed.setAsText(enumName);

        fireEditingStopped();
        ed.removePropertyChangeListener(this);
    }//GEN-LAST:event_combo_valueActionPerformed

    private void text_valueKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_valueKeyPressed
        if (ed instanceof KeyListener)
        {
            ((KeyListener)ed).keyPressed(evt);
        }

    }//GEN-LAST:event_text_valueKeyPressed

    private void text_valueKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_text_valueKeyTyped
        if (ed instanceof KeyListener)
        {
            ((KeyListener)ed).keyTyped(evt);
        }

    }//GEN-LAST:event_text_valueKeyTyped

    private void text_valueMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_text_valueMouseClicked
        if (ed instanceof MouseListener)
        {
            ((MouseListener)ed).mouseClicked(evt);
        }

    }//GEN-LAST:event_text_valueMouseClicked

    private void text_valueMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_text_valueMouseEntered
        if (ed instanceof MouseListener)
        {
            ((MouseListener)ed).mouseEntered(evt);
        }

    }//GEN-LAST:event_text_valueMouseEntered

    private void text_valueMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_text_valueMouseExited
        if (ed instanceof MouseListener)
        {
            ((MouseListener)ed).mouseExited(evt);
        }

    }//GEN-LAST:event_text_valueMouseExited

    private void text_valueMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_text_valueMousePressed
        if (ed instanceof MouseListener)
        {
            ((MouseListener)ed).mousePressed(evt);
        }

    }//GEN-LAST:event_text_valueMousePressed

    private void text_valueMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_text_valueMouseReleased
        if (ed instanceof MouseListener)
        {
            ((MouseListener)ed).mouseReleased(evt);
        }

    }//GEN-LAST:event_text_valueMouseReleased

    private void text_valueMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_text_valueMouseDragged
        if (ed instanceof MouseMotionListener)
        {
            ((MouseMotionListener)ed).mouseDragged(evt);
        }

    }//GEN-LAST:event_text_valueMouseDragged

    private void text_valueMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_text_valueMouseMoved
        if (ed instanceof MouseMotionListener)
        {
            ((MouseMotionListener)ed).mouseMoved(evt);
        }

    }//GEN-LAST:event_text_valueMouseMoved

    private void combo_valueMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_combo_valueMousePressed
        if (ed instanceof MouseListener)
        {
            ((MouseListener)ed).mousePressed(evt);
        }

    }//GEN-LAST:event_combo_valueMousePressed

    private void combo_valueMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_combo_valueMouseReleased
        if (ed instanceof MouseListener)
        {
            ((MouseListener)ed).mouseReleased(evt);
        }

    }//GEN-LAST:event_combo_valueMouseReleased

    private void text_valueMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_text_valueMouseWheelMoved
        if (ed instanceof MouseWheelListener)
        {
            ((MouseWheelListener)ed).mouseWheelMoved(evt);
        }

    }//GEN-LAST:event_text_valueMouseWheelMoved


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_advancedEditor;
    private javax.swing.JComboBox combo_value;
    private javax.swing.JTextField text_value;
    // End of variables declaration//GEN-END:variables

    private void fireEditingCanceled()
    {
        ChangeEvent evt = new ChangeEvent(this);
        for (CellEditorListener l: new ArrayList<CellEditorListener>(listeners))
        {
            l.editingCanceled(evt);
        }
    }

    private void fireEditingStopped()
    {
        ChangeEvent evt = new ChangeEvent(this);
        for (CellEditorListener l: new ArrayList<CellEditorListener>(listeners))
        {
            l.editingStopped(evt);
        }
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column)
    {
        PropertyModelLine info = (PropertyModelLine)value;
        ed = info.getEditor();
        ed.addPropertyChangeListener(this);
        ed.addPropertyWrapperEditorListener(this);

        remove(text_value);
        remove(combo_value);
        remove(bn_advancedEditor);

        String[] tags = ed.getTags();
        if (tags == null)
        {
            add(text_value, BorderLayout.CENTER);
            text_value.setText(ed.getAsText());
//            text_value.selectAll();
        }
        else
        {
            add(combo_value, BorderLayout.CENTER);
            building = true;
            combo_value.removeAllItems();
            for (String tag: tags)
            {
                combo_value.addItem(tag);
            }
            building = false;
            combo_value.setSelectedItem(ed.getAsText());
        }

        if (ed.supportsCustomEditor())
        {
            add(bn_advancedEditor, BorderLayout.EAST);
        }

        revalidate();

        return this;
    }

    @Override
    public Object getCellEditorValue()
    {
        return ed;
    }

    @Override
    public boolean isCellEditable(EventObject anEvent)
    {
        return true;
    }

    @Override
    public boolean shouldSelectCell(EventObject anEvent)
    {
        return true;
    }

    @Override
    public boolean stopCellEditing()
    {
        ed.setAsText(text_value.getText());
        ed.removePropertyChangeListener(this);
        ed.removePropertyWrapperEditorListener(this);
        return true;
    }

    @Override
    public void cancelCellEditing()
    {
        ed.removePropertyChangeListener(this);
        ed.removePropertyWrapperEditorListener(this);
    }

    @Override
    public void addCellEditorListener(CellEditorListener l)
    {
        listeners.add(l);
    }

    @Override
    public void removeCellEditorListener(CellEditorListener l)
    {
        listeners.remove(l);
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt)
    {
        if (evt.getSource() == ed)
        {
            if (PropertyWrapperEditor.PROP_VALUE.equals(
                    evt.getPropertyName()))
            {
                text_value.setText(ed.getAsText());
            }
        }
    }

    @Override
    public void propertyWrapperEditingDone(EventObject evt)
    {
        fireEditingStopped();
    }

    @Override
    public void propertyWrapperEditingCanceled(EventObject evt)
    {
        fireEditingCanceled();
    }

}
