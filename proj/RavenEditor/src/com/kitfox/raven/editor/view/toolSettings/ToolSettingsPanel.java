/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DisplayPanel.java
 *
 * Created on Nov 12, 2010, 10:46:41 PM
 */

package com.kitfox.raven.editor.view.toolSettings;

import com.kitfox.raven.editor.RavenEditor;
import com.kitfox.raven.editor.RavenViewManager;
import com.kitfox.raven.editor.node.tools.ToolPalette;
import com.kitfox.raven.editor.node.tools.ToolPaletteEvent;
import com.kitfox.raven.editor.node.tools.ToolPaletteListener;
import com.kitfox.raven.editor.node.tools.ToolPaletteWeakListener;
import com.kitfox.raven.editor.node.tools.ToolProvider;
import com.kitfox.raven.editor.view.help.HelpEcho;
import com.kitfox.raven.editor.view.help.HelpViewProvider;
import java.awt.BorderLayout;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;

/**
 *
 * @author kitfox
 */
public class ToolSettingsPanel extends javax.swing.JPanel
        implements ToolPaletteListener
{
    final RavenEditor editor;
    ToolPaletteWeakListener paletteListener;

    /** Creates new form DisplayPanel */
    public ToolSettingsPanel(RavenEditor editor)
    {
        this.editor = editor;

        ToolPalette pal = editor.getToolManager().getPalette();
        paletteListener = new ToolPaletteWeakListener(this, pal);
        pal.addToolPaletteListener(paletteListener);

        initComponents();

        updateTool();
    }

    private void updateTool()
    {
        SwingUtilities.invokeLater(new Runnable() {

            @Override
            public void run()
            {
                updateToolSwing();
            }
        });
    }

    private void updateToolSwing()
    {
//        scroll_workArea.removeAll();

        ToolPalette pal = editor.getToolManager().getPalette();
        ToolProvider prov = pal.getCurrentTool();

        label_title.setIcon(prov == null ? null : prov.getIcon());
        label_title.setText(prov == null ? null : prov.getName());

        if (prov != null)
        {
            scroll_workArea.setViewportView(prov.createToolSettingsEditor(editor));
        }
        else
        {
            scroll_workArea.add(new JLabel("No tool chosen", JLabel.CENTER));
        }

        scroll_workArea.revalidate();
        repaint();
    }

    @Override
    public void currentToolChanged(ToolPaletteEvent evt)
    {
        updateTool();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup_tools = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        label_title = new javax.swing.JLabel();
        bn_help = new javax.swing.JButton();
        scroll_workArea = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        label_title.setFont(new java.awt.Font("Tahoma", 0, 14));
        jPanel1.add(label_title, java.awt.BorderLayout.CENTER);

        bn_help.setText("?");
        bn_help.setToolTipText("Help");
        bn_help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_helpActionPerformed(evt);
            }
        });
        jPanel1.add(bn_help, java.awt.BorderLayout.EAST);

        add(jPanel1, java.awt.BorderLayout.NORTH);
        add(scroll_workArea, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void bn_helpActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_helpActionPerformed
    {//GEN-HEADEREND:event_bn_helpActionPerformed
        RavenViewManager mgr = editor.getViewManager();
        mgr.showView(HelpViewProvider.class);

        ToolPalette pal = editor.getToolManager().getPalette();
        ToolProvider prov = pal.getCurrentTool();
        if (prov == null)
        {
            return;
        }
        HelpEcho.inst().showHelpTopic(prov.getHelpTopic());

    }//GEN-LAST:event_bn_helpActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_help;
    private javax.swing.ButtonGroup buttonGroup_tools;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel label_title;
    private javax.swing.JScrollPane scroll_workArea;
    // End of variables declaration//GEN-END:variables

}
