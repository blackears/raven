/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * CameraDisplayPanel.java
 *
 * Created on Jul 28, 2011, 2:08:51 PM
 */
package com.kitfox.raven.editor.view.camera;

import com.kitfox.coyote.renderer.CyDrawStack;
import com.kitfox.coyote.renderer.CyRendererListener;
import com.kitfox.coyote.renderer.jogl.CoyotePanel;
import com.kitfox.raven.editor.RavenDocument;
import com.kitfox.raven.editor.RavenEditor;
import com.kitfox.raven.editor.RavenEditorListener;
import com.kitfox.raven.editor.RavenEditorWeakListener;
import com.kitfox.raven.editor.node.scene.FrameKey;
import com.kitfox.raven.editor.node.scene.RenderContext;
import com.kitfox.raven.editor.view.displayCy.CyRenderService;
import com.kitfox.raven.util.tree.ChildWrapperEvent;
import com.kitfox.raven.util.tree.NodeDocumentListener;
import com.kitfox.raven.util.tree.NodeDocumentWeakListener;
import java.beans.PropertyChangeEvent;
import java.util.EventObject;

/**
 *
 * @author kitfox
 */
public class CameraDisplayPanel
        //extends JPanel
        extends CoyotePanel
        implements RavenEditorListener, NodeDocumentListener,
        CyRendererListener
{
    final RavenEditor editor;
    RavenEditorWeakListener listenerEditor;
    NodeDocumentWeakListener listenerDoc;

    /** Creates new form CameraDisplayPanel */
    public CameraDisplayPanel(RavenEditor editor)
    {
        this.editor = editor;

        initComponents();

        listenerEditor = new RavenEditorWeakListener(this, editor);
        editor.addRavenEditorListener(listenerEditor);
        
        addCyRendererListener(this);
    }

    private void updateDocument()
    {
        if (listenerDoc != null)
        {
            listenerDoc.remove();
            listenerDoc = null;
        }

        RavenDocument doc = editor.getDocument();

        if (doc != null)
        {
            listenerDoc = new NodeDocumentWeakListener(this, doc.getRoot());
            doc.getRoot().addNodeDocumentListener(listenerDoc);
        }

        repaint();
    }

    @Override
    public void recentFilesChanged(EventObject evt)
    {
    }

    @Override
    public void documentChanged(EventObject evt)
    {
        updateDocument();
    }

    @Override
    public void documentPropertyChanged(PropertyChangeEvent evt)
    {
    }

    @Override
    public void documentNodeChildAdded(ChildWrapperEvent evt)
    {
    }

    @Override
    public void documentNodeChildRemoved(ChildWrapperEvent evt)
    {
    }

    @Override
    public void render(CyDrawStack rend)
    {
        RavenDocument doc = editor.getDocument();

        if (doc == null)
        {
            return;
        }

        CyRenderService serv = doc.getRoot().getNodeService(CyRenderService.class, false);
        if (serv != null)
        {
            RenderContext ctx = new RenderContext(rend, FrameKey.DIRECT);
            serv.renderCamerasAll(ctx);
        }
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
