/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.kitfox.raven.editor.view.symbol;

import com.kitfox.raven.editor.NewSymbolWizard;
import com.kitfox.raven.editor.RavenDocument;
import com.kitfox.raven.editor.RavenDocumentEvent;
import com.kitfox.raven.editor.RavenEditor;
import com.kitfox.raven.editor.RavenEditorListener;
import com.kitfox.raven.editor.RavenEditorWeakListener;
import com.kitfox.raven.util.RavenSwingUtil;
import com.kitfox.raven.util.tree.NodeDocument2Event;
import com.kitfox.raven.util.tree.NodeDocument2Listener;
import com.kitfox.raven.util.tree.NodeDocument2WeakListener;
import com.kitfox.raven.util.tree.NodeSymbol;
import com.kitfox.raven.wizard.RavenWizardDialog;
import java.awt.Component;
import java.util.EventObject;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;

/**
 *
 * @author kitfox
 */
public class SymbolPanel extends javax.swing.JPanel
        implements RavenEditorListener, NodeDocument2Listener
{
    final RavenEditor editor;
    RavenEditorWeakListener listenerEditor;
//    HistoryWeakListener listenerHistory;
    NodeDocument2WeakListener listenerRavenDoc;

    boolean updating;

    /**
     * Creates new form SymbolPanel
     */
    public SymbolPanel(RavenEditor editor)
    {
        this.editor = editor;
        
        initComponents();

//        list_symbols.setListData(new Object[]{"aaa", "bbb"});

        list_symbols.setCellRenderer(new Renderer());

        listenerEditor = new RavenEditorWeakListener(this, editor);
        editor.addRavenEditorListener(listenerEditor);
        
        updateDocument();
    }

    private void updateDocument()
    {
        if (listenerRavenDoc != null)
        {
            listenerRavenDoc.remove();
            listenerRavenDoc = null;
        }

        RavenDocument doc = editor.getDocument();
        if (doc != null)
        {
            listenerRavenDoc = new NodeDocument2WeakListener(this, doc);
            doc.addNodeDocumentListener(listenerRavenDoc);
        }
        
        updateDisplay();
    }

    private void updateDisplay()
    {
        SwingUtilities.invokeLater(
            new Runnable() {
                @Override
                public void run()
                {
                    updateDisplaySwing();
                }
            }
        );
    }
    
    private void updateDisplaySwing()
    {
        updating = true;

        RavenDocument doc = editor.getDocument();

        if (doc == null)
        {
            list_symbols.setListData(new Object[0]);
        }
        else
        {
            list_symbols.setListData(doc.getSymbols().toArray());
            list_symbols.setSelectedValue(doc.getCurSymbol(), false);
        }

        updating = false;
    }

    @Override
    public void recentFilesChanged(EventObject evt)
    {
    }

    @Override
    public void documentChanged(EventObject evt)
    {
        updateDocument();
    }

//    @Override
//    public void documentSourceChanged(EventObject evt)
//    {
//    }
    
    @Override
    public void symbolAdded(NodeDocument2Event evt)
    {
        updateDisplay();
    }
    
    @Override
    public void symbolRemoved(NodeDocument2Event evt)
    {
        updateDisplay();
    }
    
    @Override
    public void currentSymbolChanged(NodeDocument2Event evt)
    {
        if (updating)
        {
            return;
        }
        updateDisplay();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_symbols = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        bn_create = new javax.swing.JButton();
        bn_rename = new javax.swing.JButton();
        bn_delete = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        list_symbols.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_symbolsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list_symbols);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        bn_create.setText("Create");
        bn_create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_createActionPerformed(evt);
            }
        });
        jPanel1.add(bn_create);

        bn_rename.setText("Rename");
        bn_rename.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_renameActionPerformed(evt);
            }
        });
        jPanel1.add(bn_rename);

        bn_delete.setText("Delete");
        bn_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_deleteActionPerformed(evt);
            }
        });
        jPanel1.add(bn_delete);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void list_symbolsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_list_symbolsValueChanged
    {//GEN-HEADEREND:event_list_symbolsValueChanged
        if (updating)
        {
            return;
        }
        
        NodeSymbol sym = (NodeSymbol)list_symbols.getSelectedValue();
        RavenDocument doc = editor.getDocument();
        doc.setCurrentSymbol(sym);
    }//GEN-LAST:event_list_symbolsValueChanged

    private void bn_createActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_createActionPerformed
    {//GEN-HEADEREND:event_bn_createActionPerformed
        RavenDocument doc = editor.getDocument();
        if (doc == null)
        {
            return;
        }

//        String newName = doc.getUnusedDocumentName("symbol");
//                JOptionPane.showInputDialog(
//                this, "Create new symbol", newName);
//        if (newName == null)
//        {
//            return;
//        }

        NewSymbolWizard wiz = new NewSymbolWizard(editor);

        RavenWizardDialog dlg = new RavenWizardDialog(
                editor.getViewManager().getSwingRoot(), wiz);
        RavenSwingUtil.centerWindow(dlg);
        dlg.setVisible(true);

        NodeSymbol sym = dlg.getNodeDocument();

        if (sym == null)
        {
            return;
        }
        
        String name = sym.getSymbolName();
        String newName = doc.getUnusedSymbolName(name);
        if (!newName.equals(name))
        {
            sym.setSymbolName(newName);
        }

        doc.addSymbol(sym);
        
    }//GEN-LAST:event_bn_createActionPerformed

    private void bn_renameActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_renameActionPerformed
    {//GEN-HEADEREND:event_bn_renameActionPerformed
        Object val = list_symbols.getSelectedValue();
        if (val == null)
        {
            return;
        }
        
        NodeSymbol doc = (NodeSymbol)val;
        String name = doc.getSymbolName();
        String newName = JOptionPane.showInputDialog(
                this, "Rename symbol", name == null ? "" : name);
        
        if (newName == null)
        {
            return;
        }
        
        doc.setSymbolName(newName);
        repaint();
    }//GEN-LAST:event_bn_renameActionPerformed

    private void bn_deleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_deleteActionPerformed
    {//GEN-HEADEREND:event_bn_deleteActionPerformed
        RavenDocument doc = editor.getDocument();
        if (doc == null)
        {
            return;
        }

        Object val = list_symbols.getSelectedValue();
        if (val == null)
        {
            return;
        }
        
//System.err.println("Deleting");        
        NodeSymbol sym = (NodeSymbol)val;
//        int idx = doc.indexOfDocument(sym);
        doc.removeSymbol(sym);

    }//GEN-LAST:event_bn_deleteActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_create;
    private javax.swing.JButton bn_delete;
    private javax.swing.JButton bn_rename;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list_symbols;
    // End of variables declaration//GEN-END:variables

    //------------------------------------
    
    
    class Renderer extends JLabel implements ListCellRenderer
    {
        private static final long serialVersionUID = 1;

        public Renderer()
        {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(
                JList list, Object value, int index, 
                boolean isSelected, boolean cellHasFocus)
        {
            if (isSelected)
            {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            }
            else
            {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            
            NodeSymbol doc = (NodeSymbol)value;
            String name = doc.getSymbolName();
            setText(name == null ? "*" : name);
            return this;
        }
    }
}
