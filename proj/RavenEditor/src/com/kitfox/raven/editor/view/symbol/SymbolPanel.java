/*
 * To change this template, choose Tools | Templates and open the template in
 * the editor.
 */
package com.kitfox.raven.editor.view.symbol;

import com.kitfox.raven.editor.RavenDocument;
import com.kitfox.raven.editor.RavenEditor;
import com.kitfox.raven.editor.RavenEditorListener;
import com.kitfox.raven.editor.RavenEditorWeakListener;
import com.kitfox.raven.util.SelectionWeakListener;
import com.kitfox.raven.util.tree.NodeDocument;
import com.kitfox.raven.util.undo.History;
import com.kitfox.raven.util.undo.HistoryListener;
import com.kitfox.raven.util.undo.HistoryWeakListener;
import java.awt.Component;
import java.util.EventObject;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.SwingUtilities;
import javax.swing.UIDefaults;
import javax.swing.UIManager;

/**
 *
 * @author kitfox
 */
public class SymbolPanel extends javax.swing.JPanel
        implements RavenEditorListener, HistoryListener
{
    final RavenEditor editor;
    RavenEditorWeakListener listenerEditor;
    HistoryWeakListener listenerHistory;

    boolean updating;

    /**
     * Creates new form SymbolPanel
     */
    public SymbolPanel(RavenEditor editor)
    {
        this.editor = editor;
        
        initComponents();

        listenerEditor = new RavenEditorWeakListener(this, editor);
        editor.addRavenEditorListener(listenerEditor);
        updateDocument();

        list_symbols.setCellRenderer(new Renderer());
    }

    private void updateDocument()
    {
        if (listenerHistory != null)
        {
            listenerHistory.remove();
            listenerHistory = null;
        }

        RavenDocument doc = editor.getDocument();
        if (doc != null)
        {
            History hist = doc.getHistory();
            listenerHistory = new HistoryWeakListener(this, hist);
            hist.addHistoryListener(listenerHistory);
        }

        SwingUtilities.invokeLater(
            new Runnable() {
                @Override
                public void run()
                {
                    updateModelSwing();
                }
            }
        );
    }

    private void updateModelSwing()
    {
        updating = true;

        RavenDocument doc = editor.getDocument();

        if (doc == null)
        {
            list_symbols.setListData(new Object[0]);
        }
        else
        {
            list_symbols.setListData(doc.getDocuments().toArray());
            list_symbols.setSelectedValue(doc.getCurDocument(), false);
        }

        updating = false;
    }

    @Override
    public void recentFilesChanged(EventObject evt)
    {
    }

    @Override
    public void documentChanged(EventObject evt)
    {
        updateDocument();
    }

    @Override
    public void historyChanged(EventObject evt)
    {
        updateDocument();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        list_symbols = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        bn_create = new javax.swing.JButton();
        bn_rename = new javax.swing.JButton();
        bn_delete = new javax.swing.JButton();

        setLayout(new java.awt.BorderLayout());

        list_symbols.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                list_symbolsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(list_symbols);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        bn_create.setText("Create");
        jPanel1.add(bn_create);

        bn_rename.setText("Rename");
        jPanel1.add(bn_rename);

        bn_delete.setText("Delete");
        jPanel1.add(bn_delete);

        add(jPanel1, java.awt.BorderLayout.PAGE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void list_symbolsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_list_symbolsValueChanged
    {//GEN-HEADEREND:event_list_symbolsValueChanged
        if (updating)
        {
            return;
        }
        
        NodeDocument sym = (NodeDocument)list_symbols.getSelectedValue();
        RavenDocument doc = editor.getDocument();
        doc.setCurrentDocument(doc.indexOfDocument(sym));
    }//GEN-LAST:event_list_symbolsValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_create;
    private javax.swing.JButton bn_delete;
    private javax.swing.JButton bn_rename;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList list_symbols;
    // End of variables declaration//GEN-END:variables

    //------------------------------------
    
    class Renderer extends JLabel implements ListCellRenderer
    {
        private static final long serialVersionUID = 1;

        public Renderer()
        {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(
                JList list, Object value, int index, 
                boolean isSelected, boolean cellHasFocus)
        {
            if (value instanceof String)
            {
                //Empty lists will provide an empty string
                setText("");
                return this;
            }

            NodeDocument doc = (NodeDocument)value;
            UIDefaults def = UIManager.getDefaults();
            setBackground(isSelected
                ? def.getColor("List.selectionBackground")
                : def.getColor("List.background"));
            setText(doc == null ? "" : doc.getDocumentName());
            return this;
        }
    }
}
