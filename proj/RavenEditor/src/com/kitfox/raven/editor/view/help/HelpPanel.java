/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DisplayPanel.java
 *
 * Created on Nov 12, 2010, 10:46:41 PM
 */

package com.kitfox.raven.editor.view.help;

import com.kitfox.raven.editor.RavenEditor;
import com.kitfox.raven.util.undo.HistoryAction;
import java.awt.Component;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.ListCellRenderer;
import javax.swing.UIDefaults;
import javax.swing.UIManager;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkEvent.EventType;

/**
 *
 * @author kitfox
 */
public class HelpPanel extends javax.swing.JPanel
        implements HelpEchoListener
{
    final RavenEditor editor;
    ArrayList<URL> history = new ArrayList<URL>();
    int cursor = -1;

    final URL contents;

    HelpEchoWeakListener listener;

    /** Creates new form DisplayPanel */
    public HelpPanel(RavenEditor editor)
    {
        this.editor = editor;

        initComponents();

        contents = getClass().getResource("/manual/index.html");
        browseTo(contents);

        HelpEcho echo = HelpEcho.inst();
        listener = new HelpEchoWeakListener(this, echo);
        echo.addHelpEchoListener(listener);
    }

    private void browseTo(final URL url)
    {
        if (url == null)
        {
            return;
        }

        if (!history.isEmpty())
        {
            URL curUrl = history.get(cursor);
            if (url.equals(curUrl))
            {
                return;
            }
        }

        while (history.size() > cursor + 1)
        {
            history.remove(history.size() - 1);
        }

        history.add(url);
        ++cursor;
        browseToCursor();
    }


    private void browseToCursor()
    {
        try
        {
            editorPane_html.setPage(history.get(cursor));
        } catch (IOException ex)
        {
            Logger.getLogger(HelpPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Could not browse to page", "Hyperlink Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        bn_back.setEnabled(cursor > 0);
        bn_forward.setEnabled(cursor < history.size() - 1);
    }

    @Override
    public void showHelpTopic(HelpBrowseEvent evt)
    {
        browseTo(evt.getTopic());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane_html = new javax.swing.JEditorPane();
        bn_contents = new javax.swing.JButton();
        bn_back = new javax.swing.JButton();
        bn_forward = new javax.swing.JButton();

        editorPane_html.setContentType("text/html");
        editorPane_html.setEditable(false);
        editorPane_html.addHyperlinkListener(new javax.swing.event.HyperlinkListener() {
            public void hyperlinkUpdate(javax.swing.event.HyperlinkEvent evt) {
                editorPane_htmlHyperlinkUpdate(evt);
            }
        });
        jScrollPane1.setViewportView(editorPane_html);

        bn_contents.setText("Contents");
        bn_contents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_contentsActionPerformed(evt);
            }
        });

        bn_back.setText("<");
        bn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_backActionPerformed(evt);
            }
        });

        bn_forward.setText(">");
        bn_forward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bn_forwardActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 235, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(bn_back)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bn_forward)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(bn_contents)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bn_back)
                    .addComponent(bn_forward)
                    .addComponent(bn_contents))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void bn_contentsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_contentsActionPerformed
    {//GEN-HEADEREND:event_bn_contentsActionPerformed
        browseTo(contents);
    }//GEN-LAST:event_bn_contentsActionPerformed

    private void editorPane_htmlHyperlinkUpdate(javax.swing.event.HyperlinkEvent evt)//GEN-FIRST:event_editorPane_htmlHyperlinkUpdate
    {//GEN-HEADEREND:event_editorPane_htmlHyperlinkUpdate
        EventType type = evt.getEventType();
        if (type == HyperlinkEvent.EventType.ACTIVATED)
        {
            URL url = evt.getURL();
            browseTo(url);
        }


    }//GEN-LAST:event_editorPane_htmlHyperlinkUpdate

    private void bn_backActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_backActionPerformed
    {//GEN-HEADEREND:event_bn_backActionPerformed
        if (cursor > 0)
        {
            --cursor;
            browseToCursor();
        }
    }//GEN-LAST:event_bn_backActionPerformed

    private void bn_forwardActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_bn_forwardActionPerformed
    {//GEN-HEADEREND:event_bn_forwardActionPerformed
        if (cursor + 1 < history.size())
        {
            ++cursor;
            browseToCursor();
        }
    }//GEN-LAST:event_bn_forwardActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bn_back;
    private javax.swing.JButton bn_contents;
    private javax.swing.JButton bn_forward;
    private javax.swing.JEditorPane editorPane_html;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    // End of variables declaration

    class Renderer extends JLabel implements ListCellRenderer
    {
        private static final long serialVersionUID = 1;

        public Renderer()
        {
            setOpaque(true);
        }

        @Override
        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus)
        {
            if (value instanceof String)
            {
                //Empty lists will provide an empty string
                setText("");
                return this;
            }

            HistoryAction histAction = (HistoryAction)value;
            if (isSelected)
            {
                setBackground(list.getSelectionBackground());
                setForeground(list.getSelectionForeground());
            }
            else
            {
                setBackground(list.getBackground());
                setForeground(list.getForeground());
            }
            setText(histAction == null ? "" : histAction.getTitle());
            return this;
        }
    }


}
