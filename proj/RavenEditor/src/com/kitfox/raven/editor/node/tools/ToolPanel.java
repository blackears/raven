/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * ToolPanel.java
 *
 * Created on May 22, 2009, 1:33:10 PM
 */

package com.kitfox.raven.editor.node.tools;

import java.awt.event.ActionEvent;
import java.util.HashMap;
import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JToggleButton;

/**
 *
 * @author kitfox
 */
public class ToolPanel extends javax.swing.JPanel implements ToolPaletteListener
{
    private static final long serialVersionUID = 1L;
    
    HashMap<ToolProvider, JToggleButton> toolMap = new HashMap<ToolProvider, JToggleButton>();

    private ToolPalette palette;

    /** Creates new form ToolPanel */
    public ToolPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        toolGroup = new javax.swing.ButtonGroup();
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup toolGroup;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the palette
     */
    public ToolPalette getPalette()
    {
        return palette;
    }

    /**
     * @param palette the palette to set
     */
    public void setPalette(ToolPalette palette) 
    {
        if (this.palette != null)
        {
            this.palette.removeToolPaletteListener(this);
        }
        this.palette = palette;
        if (this.palette != null)
        {
            this.palette.addToolPaletteListener(this);
        }

        buildButtons();
    }

    public void currentToolChanged(ToolPaletteEvent evt)
    {
        ToolProvider curTool = palette.getCurrentTool();
        JToggleButton bn = toolMap.get(curTool);
        bn.setSelected(true);
    }

    private void buildButtons()
    {
        this.removeAll();
        toolMap.clear();

        if (palette == null)
        {
            revalidate();
            return;
        }

        ToolProvider curTool = palette.getCurrentTool();
        for (final ToolProvider tmplt: palette.getToolList())
        {
            AbstractAction action = new AbstractAction()
            {
                private static final long serialVersionUID = 1l;

                public void actionPerformed(ActionEvent e)
                {
                    palette.setCurrentTool(tmplt);
                }
            };
            action.putValue(Action.NAME, tmplt.getName());
            action.putValue(Action.SMALL_ICON, tmplt.getIcon());

            JToggleButton bn = new JToggleButton(action);
            bn.setSelected(curTool == tmplt);
//            JToggleButton bn = new JToggleButton(tmplt.getName(), tmplt.getIcon(), curTool == tmplt);



            toolMap.put(tmplt, bn);
            toolGroup.add(bn);
            add(bn);
        }
        revalidate();

    }
}
