/*
 * Copyright 2011 Mark McKay
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * DrawPanel.java
 *
 * Created on Dec 18, 2010, 7:33:48 PM
 */

package com.kitfox.raven.math.test;

import com.kitfox.raven.math.test.StrokeBuilder.PenPoint;
import com.kitfox.raven.shape.bezier.BezierMath;
import com.kitfox.raven.shape.path.PathCurve;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Path2D;
import java.util.ArrayList;
import javax.swing.SwingUtilities;
import jpen.PButtonEvent;
import jpen.PKindEvent;
import jpen.PLevel;
import jpen.PLevel.Type;
import jpen.PLevelEvent;
import jpen.PScrollEvent;
import jpen.Pen;
import jpen.PenManager;
import jpen.event.PenListener;

/**
 *
 * @author kitfox
 */
public class DrawPanel extends javax.swing.JPanel
        implements PenListener
{
    StrokeBuilder strokeBuilder;
    final PenManager penManager;

    ArrayList<Path2D.Double> history = new ArrayList<Path2D.Double>();

    private float penX;
    private float penY;
    private float penPressure;

    private float penNextX;
    private float penNextY;
    private float penNextPressure;

    boolean penDown;

    /** Creates new form DrawPanel */
    public DrawPanel()
    {
        initComponents();
        penManager = new PenManager(this);
        penManager.pen.addListener(this);
    }

    @Override
    protected void paintComponent(Graphics gg)
    {
        Graphics2D g = (Graphics2D)gg;

        //Clear
        g.setColor(Color.white);
        g.fillRect(0, 0, getWidth(), getHeight());

        //Draw curves
        g.scale(1 / 100.0, 1 / 100.0);

        g.setColor(Color.black);
        for (Path2D.Double path: history)
        {
            g.draw(path);
        }

        g.setColor(Color.blue);
        if (strokeBuilder != null)
        {
            PathCurve path = strokeBuilder.getDisplayPath();
            if (path != null)
            {
                Path2D.Double p = path.asPath2D();
                g.draw(p);
            }
        }
    }

    public void clear()
    {
        history.clear();
        repaint();
    }

    private void setPenDown(boolean value)
    {
//        System.err.println("Set pen down: " + value);

        if (value)
        {
            strokeBuilder = new StrokeBuilder();
        }
        else
        {
            final PathCurve curve = strokeBuilder.getDisplayPath();
            if (curve != null)
            {
                SwingUtilities.invokeLater(new Runnable()
                {
                    @Override
                    public void run()
                    {
                        history.add(curve.asPath2D());
                        repaint();
                    }
                });
            }
            strokeBuilder = null;
        }
        penDown = value;
    }

    private void penMoved()
    {
        if (penDown)
        {
            //Only record if minimum distance traveled
            if (BezierMath.square(penX - penNextX) +
                    + BezierMath.square(penY - penNextY) <= 4)
            {
                return;
            }

            Pen pen = penManager.pen;
            float px = pen.getLevelValue(Type.X);
            float py = pen.getLevelValue(Type.Y);
            float ps = pen.getLevelValue(Type.PRESSURE);

//System.err.println("px py ps: " + px + " " + py + " " + ps);
//System.err.println("penX penY press: " + penX + " " + penY + " " + penPressure);

            penX = penNextX;
            penY = penNextY;
            penPressure = penNextPressure;
//            strokeBuilder.addPoint(new PenPoint(
//                    px * 100,
//                    py * 100,
//                    ps * 1000));
//    System.err.println("+PenRec: " + rec);
            strokeBuilder.addPoint(new PenPoint(
                    penX * 100,
                    penY * 100,
                    penPressure * 1000));
            repaint();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                formMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                formMouseReleased(evt);
            }
        });
        addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                formMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                formMouseMoved(evt);
            }
        });
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    private void formMouseDragged(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseDragged
    {//GEN-HEADEREND:event_formMouseDragged
//        PenRecord rec = new PenRecord(penManager.pen);
//        strokeBuilder.addPoint(evt.getX(), evt.getY(), rec);
//System.err.println("+PenRec: " + rec);
//        repaint();

        Pen pen = penManager.pen;
        float px = pen.getLevelValue(Type.X);
        float py = pen.getLevelValue(Type.Y);
        float ps = pen.getLevelValue(Type.PRESSURE);
        if (ps == 0)
        {
            //When dragging with mouse, there is no pressure
            ps = 1;
        }

        penNextX = px;
        penNextY = py;
        penNextPressure = ps;


//        penNextX = evt.getX();
//        penNextY = evt.getY();
//        penNextPressure = penPressure = 1;

//        int newX = evt.getX();
//        int newY = evt.getY();
//        boolean penUpdate = false;
//        if (BezierMath.square(penX - newX) + BezierMath.square(penY - newY) > 2)
//        {
//            //Pen must have moved minimum distance to create new record
//            penNextX = penX = newX;
//            penNextY = penY = newY;
//            penNextPressure = penPressure = 1;
//            penUpdate = true;
//        }
//
//        if (penUpdate)
//        {
//            penMoved();
//        }
        penMoved();

//        System.err.println("Mouse dragged");
    }//GEN-LAST:event_formMouseDragged

    private void formMouseMoved(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseMoved
    {//GEN-HEADEREND:event_formMouseMoved

    }//GEN-LAST:event_formMouseMoved

    private void formMousePressed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMousePressed
    {//GEN-HEADEREND:event_formMousePressed
//        strokeBuilder = new StrokeBuilder();
//        System.err.println("Mouse pressed");
        penNextX = penX = evt.getX();
        penNextY = penY = evt.getY();
        penNextPressure = penPressure = 1;

        setPenDown(true);
    }//GEN-LAST:event_formMousePressed

    private void formMouseReleased(java.awt.event.MouseEvent evt)//GEN-FIRST:event_formMouseReleased
    {//GEN-HEADEREND:event_formMouseReleased
//        PathCurve curve = strokeBuilder.getDisplayPath();
//        if (curve != null)
//        {
//            history.add(curve.asPath2D());
//        }
//        strokeBuilder = null;
//        repaint();
//        System.err.println("Mouse released");
        setPenDown(false);
    }//GEN-LAST:event_formMouseReleased

    @Override
    public void penKindEvent(PKindEvent pke)
    {
//        switch (pke.kind.getType())
//        {
//            case CURSOR:
//                break;
//        }
//        System.err.println(pke);
    }

    @Override
    public void penLevelEvent(PLevelEvent ple)
    {
        if (true)
        {
            return;
        }

//        boolean penUpdate = false;
//        boolean penUp = false;
//        boolean penDown = false;
//        float newX = penX;
//        float newY = penY;
        for (int i = 0; i < ple.levels.length; ++i)
        {
            PLevel lvl = ple.levels[i];
            switch (lvl.getType())
            {
                case X:
                    penNextX = lvl.value;
                    break;
                case Y:
                    penNextY = lvl.value;
                    break;
                case PRESSURE:
                {
                    penNextPressure = lvl.value;
//                    if (penPressure == 0 && newPres != 0)
//                    {
//                        setPenDown(true);
//                    }
//                    else if (penPressure != 0 && newPres == 0)
//                    {
//                        setPenDown(false);
//                    }
//                    penPressure = newPres;
//                    penUpdate = true;
                    break;
                }
            }
        }

        penMoved();
//        if (BezierMath.square(penX - newX) + BezierMath.square(penY - newY) > 4)
//        {
//            //Pen must have moved minimum distance to create new record
//            penX = newX;
//            penY = newY;
//  //          penUpdate = true;
//            penMoved();
//        }

//        if (penUpdate)
//        {
//            penMoved();
//        }
//        System.err.println(ple);
    }

    @Override
    public void penButtonEvent(PButtonEvent pbe)
    {
        
    }

    @Override
    public void penScrollEvent(PScrollEvent pse)
    {
        
    }

    @Override
    public void penTock(long l)
    {
        
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
